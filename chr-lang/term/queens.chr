-- Pure backtracking example, no use of global vars or priority
-- Higher queen problems are very slow, can be used for optimizing the solver

{-
--------
-- Performance (MacBook (12", Early 2016), 1,2 GHz Intel Core m5, 8 GB 1867 MHz LPDDR3):
--------

Queens 6 (4 solutions)
--------
---------------- DONE (28.498958s / 788842 = 0.000036127587s) term/queens.chr ----------------

real	0m28.520s
user	0m28.118s
sys	0m0.273s

--------
-- Performance MacBook Pro (15-inch, 2018), 2,9 GHz 6-Core Intel Core i9:
--------
---------------- DONE (13.986641s / 788842 = 0.000017730598s) term/queens.chr ----------------

real	0m14.093s
user	0m13.993s
sys	0m0.074s

--------
-- Performance MacBook Pro M2 (14-inch, 2022)
--------

---------------- DONE (8.036329s / 788842 = 0.000010187501s) chr/chr-lang/term/queens.chr ----------------

real	0m8.054s
user	0m7.986s
sys	0m0.065s
-}

{-
-- 4 Queens problem
queens @ Queens <=> Row 1, Row 2, Row 3, Row 4.
row @ Row r <=> Queen r 1 \/ Queen r 2 \/ Queen r 3 \/ Queen r 4.
-}

{-
-- 5 Queens problem
queens @ Queens <=> Row 1, Row 2, Row 3, Row 4, Row 5.
row @ Row r <=> Queen r 1 \/ Queen r 2 \/ Queen r 3 \/ Queen r 4 \/ Queen r 5.
-}

{-
-}
-- 6 Queens problem
queens @ Queens <=> Row 1, Row 2, Row 3, Row 4, Row 5, Row 6.
row @ Row r <=> Queen r 1 \/ Queen r 2 \/ Queen r 3 \/ Queen r 4 \/ Queen r 5 \/ Queen r 6.

{-
-- 8 Queens problem
queens @ Queens <=> Row 1, Row 2, Row 3, Row 4, Row 5, Row 6, Row 7, Row 8.
row @ Row r <=> Queen r 1 \/ Queen r 2 \/ Queen r 3 \/ Queen r 4 \/ Queen r 5 \/ Queen r 6 \/ Queen r 7 \/ Queen r 8.
-}

column @ Queen r1 c1, Queen r2 c2 ==> c1 /= c2.
diagonal @ Queen r1 c1, Queen r2 c2 ==> Abs (r1 - r2) /= Abs (c1 - c2).

?Queens.
